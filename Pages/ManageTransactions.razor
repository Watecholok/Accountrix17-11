@page "/transactions"

@layout MainLayout
@inject NavigationManager _navigation
@inject HttpClient HttpHandler
@inject UserDetail _RegisterLogic
@inject DatabaseAccountrix _DatabaseLogic

@using System.Threading.Tasks

@*inline css styling is used because we tried scoped css styling and it doesnt apply, problem might be due to parents class overriding the children component, something to do with Mudblazor*@

<div class="transaction-page">
    <h2 style="color: #ffffff;">Transaction Management</h2>
    <div style="display: flex; flex-direction: row; gap: 2em; margin-top: 2em;">
        <MudPaper Class="pa-8" Outlined="true" Style="background-color: #1e1e2d; border-radius: 15px; padding: 1em; width: 20em;">
            <h3 style="color: #ffffff;">Add Transaction</h3>
            <MudTextField Class="transaction-customtextfield" @bind-Value="_transaction.amount" Label="Amount" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Warning" />

            <MudRadioGroup @bind-Value="@radiobtn_val" Style="margin-top: 1em;">
                <MudRadio Class="radio-label" Value="1" Color="Color.Tertiary" Size="Size.Medium">Income</MudRadio>
                <MudRadio Class="radio-label" Value="2" Color="Color.Secondary" Size="Size.Medium">Expense</MudRadio>
            </MudRadioGroup>

            <MudTextField Class="transaction-customtextfield" @bind-Value="_transaction.TransactionReason" Label="Transaction Reason" Variant="Variant.Text" Style="margin-top: 1em;" />

            <MudButton OnClick="async() => await SaveData()" Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Save" Style="margin-top: 1em;">Add Transaction</MudButton>
        </MudPaper>

        <MudPaper Class="pa-8" Outlined="true" Style="background-color: #1e1e2d; border-radius: 15px; padding: 1em; width: 20em;">
            <h3 style="color: #ffffff;">Delete Transaction</h3>
            <MudTextField Class="transaction-customtextfield" @bind-Value="transID_to_del" Label="Enter transaction ID" Variant="Variant.Text" />

            <MudButton OnClick="async() => await DeleteData(transID_to_del)" Variant="Variant.Filled" Size="Size.Large" Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.Delete" Style="margin-top: 1em;">Delete Transaction</MudButton>
        </MudPaper>
    </div>

    <div style="width: 80%; margin-top: 2em;">
        <MudDataGrid Items="@datalist" Filterable="true" SortMode="SortMode.Multiple" Groupable="true">
            <Columns>
                <PropertyColumn Property="context => context.amount" Title="Amount" Format="C" />
                <PropertyColumn Property="context => context.TransactionDate" Title="Date" />
                <PropertyColumn Property="context => context.TransactionReason" Title="Reason" />
                <PropertyColumn Property="context => context.transaction_id" Title="Transaction ID" />
            </Columns>
        </MudDataGrid>
    </div>
</div>
@code {
    private IQueryable<UserTransaction> datalist = null;
    DatabaseAccountrix _databaseLogic = new DatabaseAccountrix();
    UserTransaction _transaction = new UserTransaction();
    TransactionList transactions = new TransactionList();

    private int radiobtn_val { get; set; }
    private string ?transID_to_del { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            List<UserTransaction> ListOfTransactions = await HttpHandler.GetFromJsonAsync<List<UserTransaction>>("/transactions");
            _databaseLogic.tmp_trans.Transactions = ListOfTransactions;
            datalist = ListOfTransactions.AsQueryable();

            _databaseLogic.tmp_trans.DisplayTransactionHistory();

        }
        catch(NullReferenceException)
        {
            Console.WriteLine("No transactions");
        }

    }

    private async Task SaveData()
    {
        if (radiobtn_val == 1)
        {
            _transaction.amount = _transaction.amount;
        }
        else if (radiobtn_val == 2)
        {
            _transaction.amount = _transaction.amount * -1;
        }
        UserTransaction tmp_transaction = new UserTransaction(_transaction.amount, _transaction.TransactionReason, DateTime.Now);
        await HttpHandler.PostAsJsonAsync("/transactions", tmp_transaction);

        Console.WriteLine("Transaction saved successfully Transaction ID: {0}", tmp_transaction.transaction_id);
        _transaction.amount = 0;
        _transaction.TransactionReason = "";
        radiobtn_val = 0;
        await LoadData();
        StateHasChanged();
    }

        private async Task DeleteData(string transaction_id)
        {
            Console.WriteLine("ID contained in button: {0}", transaction_id);
            var response = await HttpHandler.PostAsJsonAsync($"/transactions/{transaction_id}", transaction_id);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Transaction has successfully been removed!");
                transID_to_del = "";
                await LoadData();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Failed to delete transaction. Status Code: " + response.StatusCode);
            }
        }
}
