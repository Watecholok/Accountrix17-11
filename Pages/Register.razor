@page "/register"
@inject NavigationManager _navigation
@layout LoginRegisterLayout

@inject HttpClient HttpHandler
@inject UserDetail _RegisterLogic
@inject DatabaseAccountrix _DatabaseLogic

@using App_Classes 
@using System.Threading.Tasks

<div class="register-page">
    <div class="form-title">
        <h1>Sign Up</h1>
    </div>
    <hr class="rounded-divider" />
<MudPaper Class="pa-16 ma-2" Elevation="20" Style="height: 50em; width: 50em; background-color: #121212; display: flex; flex-direction: column; align-items: center; justify-content: space-between; border-radius: 25px;">
    <div class="error-message" style="display: @pageState.displaystatus;">
            @if(pageState.validationstatus == false)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@pageState.ErrorMessage</MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">@pageState.ErrorMessage</MudAlert>
            }

    </div>
    <div class="input-section">
            <MudTextField Class="custom-textfield" @bind-Value="userDetail.name" Label="First Name" HelperText="@HelperTextName.text" Variant="Variant.Text" />
    </div>
    <div class="input-section">
            <MudTextField Class="custom-textfield" @bind-Value="userDetail.email" Label="Email" HelperText="@HelperTextEmail.text" Variant="Variant.Text" />
    </div>
    <div class="input-section">
            <MudTextField Class="custom-textfield" @bind-Value="userDetail.password" Label="Password" HelperText="@HelperTextPassword.text" Variant="Variant.Text" InputType="InputType.Password" />
    </div>
    <div class="btn-sign-up">
        <MudButton OnClick="async() => await ProcessInfo()" Variant="Variant.Filled" Style="background-color: #fff200; color: #121212; width: 200px; height: 60px;">
            Sign up
        </MudButton>
    </div>
    <div class="already-sign-up">
        <p>Already sign up? <a href="/login">Log in!</a></p>
    </div>
 </MudPaper>
</div>


@code {
    PageValidation pageState = new PageValidation(false, "none", "");

    CustomHelperText HelperTextName = new CustomHelperText("Max 20 character");
    CustomHelperText HelperTextEmail = new CustomHelperText("");
    CustomHelperText HelperTextPassword = new CustomHelperText("Enter a strong password");

    UserDetail userDetail = new UserDetail();
    DatabaseAccountrix databaseLogic = new DatabaseAccountrix();

    private void NavigateToLandingPage ()
    {
        _navigation.NavigateTo("/");
    }

    private async Task<bool> ValidateAllInput()
    {
        try
        {
            if (userDetail.name.Length >= 20 || userDetail.name.Length == 0)
            {
                pageState.SetFailureUI("Invalid Name!");
                StateHasChanged();
                return false;
            }
            else if (userDetail.email.Contains("@") == false || userDetail.email.EndsWith(".com") == false || String.IsNullOrEmpty(userDetail.email) == true)
            {
                pageState.SetFailureUI("Invalid Email Format!");
                StateHasChanged();
                return false;
            }
            else if (string.IsNullOrWhiteSpace(userDetail.password) == true)
            {
                pageState.SetFailureUI("Invalid Password!");
                StateHasChanged();
                return false;
            }
            else
            {
                UserDetail tmp_userDetail = new UserDetail(userDetail.email, userDetail.password, userDetail.name);
                await HttpHandler.PostAsJsonAsync("/register", tmp_userDetail);

                Console.WriteLine("User data saved successfully!");
                pageState.SetSuccessUI("Account created successfully!");
                StateHasChanged();
                return true;
            }
        }
        catch (NullReferenceException)
        {
            Console.WriteLine("Empty field detected");
            pageState.SetFailureUI("Fill in the info required");
            StateHasChanged();
            return false;
        }

    }

    private async Task ProcessInfo()
    {
        if (await ValidateAllInput() == true)
        {
            await Task.Delay(2500);
            NavigateToLandingPage();
        }
    }
}
